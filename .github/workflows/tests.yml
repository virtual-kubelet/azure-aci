name: azure-aci-test

concurrency:
  group:  ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  workflow_run:
    workflows: [Lint]
    types:
      - completed
  push:
    branches: [master]
    paths-ignore: [docs/**, "**.md", "**.mdx", "**.png", "**.jpg"]
  pull_request_target:
    branches: [master]
    paths-ignore: [docs/**, "**.md", "**.mdx", "**.png", "**.jpg"]

env:
  # Common versions
  GO_VERSION: '1.18'

jobs:
  tests:
    env:
      ACTIVEDIRECTORYENDPOINTURL: "https://login.microsoftonline.com"
      RESOURCEMANAGERENDPOINTURL: "https://management.azure.com/"
      ACTIVEDIRECTORYGRAPHRESOURCEID: "https://login.microsoftonline.com"
      SQLMANAGEMENTENDPOINTURL: "https://management.core.windows.net:8443/"
      GALLERYENDPOINTURL: "https://gallery.azure.com/"
      MANAGEMENTENDPOINTURL: "https://manage.windowsazure.com/"
      CLIENTSECRET: ${{ secrets.CLIENT_SECRET }}
      WORKSPACEKEY: ${{ secrets.OMS_WORKSPACE_KEY }}

    runs-on: ubuntu-latest
    environment: test
    steps:
      - name:  Set up Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION  }}

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Run unit tests & Generate coverage
        env:
          clientId: ${{ secrets.CLIENTID  }}
          subscriptionId: ${{ secrets.SUBSCRIPTIONID  }}
          tenantId: ${{ secrets.TENANT_ID }}
          activeDirectoryEndpointUrl: ${{ env.ACTIVEDIRECTORYENDPOINTURL  }}
          resourceManagerEndpointUrl: ${{ env.RESOURCEMANAGERENDPOINTURL  }}
          activeDirectoryGraphResourceId: ${{ env.ACTIVEDIRECTORYGRAPHRESOURCEID  }}
          sqlManagementEndpointUrl: ${{ env.SQLMANAGEMENTENDPOINTURL  }}
          galleryEndpointUrl: ${{ env.GALLERYENDPOINTURL  }}
          managementEndpointUrl: ${{ env.MANAGEMENTENDPOINTURL  }}
          clientSecret: ${{ secrets.CLIENT_SECRET }}
          omsworkspaceID: ${{ secrets.OMSWORKSPACEID  }}
          omsworkspaceKey: ${{ secrets.OMS_WORKSPACE_KEY }}
        run: |
          make testauth test

      - name: Upload Codecov report
        uses: codecov/codecov-action@v3
        with:
          ## Repository upload token - get it from codecov.io. Required only for private repositories
          token: ${{ secrets.CODECOV_TOKEN  }}
          ## Comma-separated list of files to upload
          files: ./coverage.out
