name: create release & publish the image
on:
  create:
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]

permissions:
  contents: write
  packages: write


env:
  REGISTRY: ghcr.io
  # Common versions
  GO_VERSION: '1.18'
  IMAGE_NAME: 'virtual-kubelet'

jobs:
  create-release:
    runs-on: ubuntu-20.04
    steps:
      - name: Set up Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION  }}
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Goreleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          version: latest
          args: release --rm-dist --timeout 60m --debug
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  export-registry:
    runs-on: ubuntu-20.04
    outputs:
      registry: ${{ steps.export.outputs.registry }}
    steps:
      - id: export
        run: |
          # registry must be in lowercase
          echo "::set-output name=registry::$(echo "${{ env.REGISTRY }}/${{ github.repository }}" | tr [:upper:] [:lower:])"

  publish-images:
    needs: export-registry
    env:
      REGISTRY: ${{ needs.export-registry.outputs.registry }}
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0
      - name: Login to ${{ env.REGISTRY }}
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Set Image tag
        run: |
          ver=${{ env.RELEASE_VERSION}}
          echo "IMG_TAG=${ver#"v"}" >> $GITHUB_ENV
      - name: Build and push image
        run: |
          OUTPUT_TYPE=type=registry make docker-build-image
        env:
          VERSION: ${{ env.IMG_TAG }}

      - name: Scan ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMG_TAG }}
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMG_TAG }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          timeout: '5m0s'
        env:
          TRIVY_USERNAME: ${{ github.actor }}
          TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
