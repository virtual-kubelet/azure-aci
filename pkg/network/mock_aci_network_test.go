// Code generated by MockGen. DO NOT EDIT.
// Source: aci_network.go

// Package network is a generated GoMock package.
package network

import (
	context "context"
	reflect "reflect"

	armnetwork "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2"
	gomock "github.com/golang/mock/gomock"
	auth "github.com/virtual-kubelet/azure-aci/pkg/auth"
)

// MockProviderNetworkInterface is a mock of ProviderNetworkInterface interface.
type MockProviderNetworkInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProviderNetworkInterfaceMockRecorder
}

// MockProviderNetworkInterfaceMockRecorder is the mock recorder for MockProviderNetworkInterface.
type MockProviderNetworkInterfaceMockRecorder struct {
	mock *MockProviderNetworkInterface
}

// NewMockProviderNetworkInterface creates a new mock instance.
func NewMockProviderNetworkInterface(ctrl *gomock.Controller) *MockProviderNetworkInterface {
	mock := &MockProviderNetworkInterface{ctrl: ctrl}
	mock.recorder = &MockProviderNetworkInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderNetworkInterface) EXPECT() *MockProviderNetworkInterfaceMockRecorder {
	return m.recorder
}

// CreateACISubnet mocks base method.
func (m *MockProviderNetworkInterface) CreateACISubnet(ctx context.Context, subnetsClient *armnetwork.SubnetsClient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateACISubnet", ctx, subnetsClient)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateACISubnet indicates an expected call of CreateACISubnet.
func (mr *MockProviderNetworkInterfaceMockRecorder) CreateACISubnet(ctx, subnetsClient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateACISubnet", reflect.TypeOf((*MockProviderNetworkInterface)(nil).CreateACISubnet), ctx, subnetsClient)
}

// GetACISubnet mocks base method.
func (m *MockProviderNetworkInterface) GetACISubnet(ctx context.Context, subnetsClient *armnetwork.SubnetsClient) (armnetwork.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetACISubnet", ctx, subnetsClient)
	ret0, _ := ret[0].(armnetwork.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetACISubnet indicates an expected call of GetACISubnet.
func (mr *MockProviderNetworkInterfaceMockRecorder) GetACISubnet(ctx, subnetsClient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetACISubnet", reflect.TypeOf((*MockProviderNetworkInterface)(nil).GetACISubnet), ctx, subnetsClient)
}

// GetSubnetClient mocks base method.
func (m *MockProviderNetworkInterface) GetSubnetClient(ctx context.Context, azConfig *auth.Config) (*armnetwork.SubnetsClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnetClient", ctx, azConfig)
	ret0, _ := ret[0].(*armnetwork.SubnetsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnetClient indicates an expected call of GetSubnetClient.
func (mr *MockProviderNetworkInterfaceMockRecorder) GetSubnetClient(ctx, azConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnetClient", reflect.TypeOf((*MockProviderNetworkInterface)(nil).GetSubnetClient), ctx, azConfig)
}
