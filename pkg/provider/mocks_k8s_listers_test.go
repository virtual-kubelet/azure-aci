// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/client-go/listers/core/v1 (interfaces: ComponentStatusLister,ConfigMapLister,ConfigMapNamespaceLister,EndpointsLister,EndpointsNamespaceLister,EventLister,EventNamespaceLister,LimitRangeLister,LimitRangeNamespaceLister,NamespaceLister,NodeLister,PersistentVolumeLister,PersistentVolumeClaimLister,PersistentVolumeClaimNamespaceLister,PodLister,PodNamespaceLister,PodTemplateLister,PodTemplateNamespaceLister,ReplicationControllerLister,ReplicationControllerNamespaceLister,ResourceQuotaLister,ResourceQuotaNamespaceLister,SecretLister,SecretNamespaceLister,ServiceLister,ServiceNamespaceLister,ServiceAccountLister,ServiceAccountNamespaceLister)

// Package provider is a generated GoMock package.
package provider

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	v10 "k8s.io/client-go/listers/core/v1"
)

// MockComponentStatusLister is a mock of ComponentStatusLister interface.
type MockComponentStatusLister struct {
	ctrl     *gomock.Controller
	recorder *MockComponentStatusListerMockRecorder
}

// MockComponentStatusListerMockRecorder is the mock recorder for MockComponentStatusLister.
type MockComponentStatusListerMockRecorder struct {
	mock *MockComponentStatusLister
}

// NewMockComponentStatusLister creates a new mock instance.
func NewMockComponentStatusLister(ctrl *gomock.Controller) *MockComponentStatusLister {
	mock := &MockComponentStatusLister{ctrl: ctrl}
	mock.recorder = &MockComponentStatusListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComponentStatusLister) EXPECT() *MockComponentStatusListerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockComponentStatusLister) Get(arg0 string) (*v1.ComponentStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v1.ComponentStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockComponentStatusListerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockComponentStatusLister)(nil).Get), arg0)
}

// List mocks base method.
func (m *MockComponentStatusLister) List(arg0 labels.Selector) ([]*v1.ComponentStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.ComponentStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockComponentStatusListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockComponentStatusLister)(nil).List), arg0)
}

// MockConfigMapLister is a mock of ConfigMapLister interface.
type MockConfigMapLister struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMapListerMockRecorder
}

// MockConfigMapListerMockRecorder is the mock recorder for MockConfigMapLister.
type MockConfigMapListerMockRecorder struct {
	mock *MockConfigMapLister
}

// NewMockConfigMapLister creates a new mock instance.
func NewMockConfigMapLister(ctrl *gomock.Controller) *MockConfigMapLister {
	mock := &MockConfigMapLister{ctrl: ctrl}
	mock.recorder = &MockConfigMapListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigMapLister) EXPECT() *MockConfigMapListerMockRecorder {
	return m.recorder
}

// ConfigMaps mocks base method.
func (m *MockConfigMapLister) ConfigMaps(arg0 string) v10.ConfigMapNamespaceLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigMaps", arg0)
	ret0, _ := ret[0].(v10.ConfigMapNamespaceLister)
	return ret0
}

// ConfigMaps indicates an expected call of ConfigMaps.
func (mr *MockConfigMapListerMockRecorder) ConfigMaps(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigMaps", reflect.TypeOf((*MockConfigMapLister)(nil).ConfigMaps), arg0)
}

// List mocks base method.
func (m *MockConfigMapLister) List(arg0 labels.Selector) ([]*v1.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockConfigMapListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockConfigMapLister)(nil).List), arg0)
}

// MockConfigMapNamespaceLister is a mock of ConfigMapNamespaceLister interface.
type MockConfigMapNamespaceLister struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMapNamespaceListerMockRecorder
}

// MockConfigMapNamespaceListerMockRecorder is the mock recorder for MockConfigMapNamespaceLister.
type MockConfigMapNamespaceListerMockRecorder struct {
	mock *MockConfigMapNamespaceLister
}

// NewMockConfigMapNamespaceLister creates a new mock instance.
func NewMockConfigMapNamespaceLister(ctrl *gomock.Controller) *MockConfigMapNamespaceLister {
	mock := &MockConfigMapNamespaceLister{ctrl: ctrl}
	mock.recorder = &MockConfigMapNamespaceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigMapNamespaceLister) EXPECT() *MockConfigMapNamespaceListerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockConfigMapNamespaceLister) Get(arg0 string) (*v1.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v1.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockConfigMapNamespaceListerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConfigMapNamespaceLister)(nil).Get), arg0)
}

// List mocks base method.
func (m *MockConfigMapNamespaceLister) List(arg0 labels.Selector) ([]*v1.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockConfigMapNamespaceListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockConfigMapNamespaceLister)(nil).List), arg0)
}

// MockEndpointsLister is a mock of EndpointsLister interface.
type MockEndpointsLister struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointsListerMockRecorder
}

// MockEndpointsListerMockRecorder is the mock recorder for MockEndpointsLister.
type MockEndpointsListerMockRecorder struct {
	mock *MockEndpointsLister
}

// NewMockEndpointsLister creates a new mock instance.
func NewMockEndpointsLister(ctrl *gomock.Controller) *MockEndpointsLister {
	mock := &MockEndpointsLister{ctrl: ctrl}
	mock.recorder = &MockEndpointsListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEndpointsLister) EXPECT() *MockEndpointsListerMockRecorder {
	return m.recorder
}

// Endpoints mocks base method.
func (m *MockEndpointsLister) Endpoints(arg0 string) v10.EndpointsNamespaceLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Endpoints", arg0)
	ret0, _ := ret[0].(v10.EndpointsNamespaceLister)
	return ret0
}

// Endpoints indicates an expected call of Endpoints.
func (mr *MockEndpointsListerMockRecorder) Endpoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Endpoints", reflect.TypeOf((*MockEndpointsLister)(nil).Endpoints), arg0)
}

// List mocks base method.
func (m *MockEndpointsLister) List(arg0 labels.Selector) ([]*v1.Endpoints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.Endpoints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockEndpointsListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockEndpointsLister)(nil).List), arg0)
}

// MockEndpointsNamespaceLister is a mock of EndpointsNamespaceLister interface.
type MockEndpointsNamespaceLister struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointsNamespaceListerMockRecorder
}

// MockEndpointsNamespaceListerMockRecorder is the mock recorder for MockEndpointsNamespaceLister.
type MockEndpointsNamespaceListerMockRecorder struct {
	mock *MockEndpointsNamespaceLister
}

// NewMockEndpointsNamespaceLister creates a new mock instance.
func NewMockEndpointsNamespaceLister(ctrl *gomock.Controller) *MockEndpointsNamespaceLister {
	mock := &MockEndpointsNamespaceLister{ctrl: ctrl}
	mock.recorder = &MockEndpointsNamespaceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEndpointsNamespaceLister) EXPECT() *MockEndpointsNamespaceListerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockEndpointsNamespaceLister) Get(arg0 string) (*v1.Endpoints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v1.Endpoints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEndpointsNamespaceListerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEndpointsNamespaceLister)(nil).Get), arg0)
}

// List mocks base method.
func (m *MockEndpointsNamespaceLister) List(arg0 labels.Selector) ([]*v1.Endpoints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.Endpoints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockEndpointsNamespaceListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockEndpointsNamespaceLister)(nil).List), arg0)
}

// MockEventLister is a mock of EventLister interface.
type MockEventLister struct {
	ctrl     *gomock.Controller
	recorder *MockEventListerMockRecorder
}

// MockEventListerMockRecorder is the mock recorder for MockEventLister.
type MockEventListerMockRecorder struct {
	mock *MockEventLister
}

// NewMockEventLister creates a new mock instance.
func NewMockEventLister(ctrl *gomock.Controller) *MockEventLister {
	mock := &MockEventLister{ctrl: ctrl}
	mock.recorder = &MockEventListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventLister) EXPECT() *MockEventListerMockRecorder {
	return m.recorder
}

// Events mocks base method.
func (m *MockEventLister) Events(arg0 string) v10.EventNamespaceLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Events", arg0)
	ret0, _ := ret[0].(v10.EventNamespaceLister)
	return ret0
}

// Events indicates an expected call of Events.
func (mr *MockEventListerMockRecorder) Events(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Events", reflect.TypeOf((*MockEventLister)(nil).Events), arg0)
}

// List mocks base method.
func (m *MockEventLister) List(arg0 labels.Selector) ([]*v1.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockEventListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockEventLister)(nil).List), arg0)
}

// MockEventNamespaceLister is a mock of EventNamespaceLister interface.
type MockEventNamespaceLister struct {
	ctrl     *gomock.Controller
	recorder *MockEventNamespaceListerMockRecorder
}

// MockEventNamespaceListerMockRecorder is the mock recorder for MockEventNamespaceLister.
type MockEventNamespaceListerMockRecorder struct {
	mock *MockEventNamespaceLister
}

// NewMockEventNamespaceLister creates a new mock instance.
func NewMockEventNamespaceLister(ctrl *gomock.Controller) *MockEventNamespaceLister {
	mock := &MockEventNamespaceLister{ctrl: ctrl}
	mock.recorder = &MockEventNamespaceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventNamespaceLister) EXPECT() *MockEventNamespaceListerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockEventNamespaceLister) Get(arg0 string) (*v1.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v1.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEventNamespaceListerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEventNamespaceLister)(nil).Get), arg0)
}

// List mocks base method.
func (m *MockEventNamespaceLister) List(arg0 labels.Selector) ([]*v1.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockEventNamespaceListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockEventNamespaceLister)(nil).List), arg0)
}

// MockLimitRangeLister is a mock of LimitRangeLister interface.
type MockLimitRangeLister struct {
	ctrl     *gomock.Controller
	recorder *MockLimitRangeListerMockRecorder
}

// MockLimitRangeListerMockRecorder is the mock recorder for MockLimitRangeLister.
type MockLimitRangeListerMockRecorder struct {
	mock *MockLimitRangeLister
}

// NewMockLimitRangeLister creates a new mock instance.
func NewMockLimitRangeLister(ctrl *gomock.Controller) *MockLimitRangeLister {
	mock := &MockLimitRangeLister{ctrl: ctrl}
	mock.recorder = &MockLimitRangeListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLimitRangeLister) EXPECT() *MockLimitRangeListerMockRecorder {
	return m.recorder
}

// LimitRanges mocks base method.
func (m *MockLimitRangeLister) LimitRanges(arg0 string) v10.LimitRangeNamespaceLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LimitRanges", arg0)
	ret0, _ := ret[0].(v10.LimitRangeNamespaceLister)
	return ret0
}

// LimitRanges indicates an expected call of LimitRanges.
func (mr *MockLimitRangeListerMockRecorder) LimitRanges(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LimitRanges", reflect.TypeOf((*MockLimitRangeLister)(nil).LimitRanges), arg0)
}

// List mocks base method.
func (m *MockLimitRangeLister) List(arg0 labels.Selector) ([]*v1.LimitRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.LimitRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockLimitRangeListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLimitRangeLister)(nil).List), arg0)
}

// MockLimitRangeNamespaceLister is a mock of LimitRangeNamespaceLister interface.
type MockLimitRangeNamespaceLister struct {
	ctrl     *gomock.Controller
	recorder *MockLimitRangeNamespaceListerMockRecorder
}

// MockLimitRangeNamespaceListerMockRecorder is the mock recorder for MockLimitRangeNamespaceLister.
type MockLimitRangeNamespaceListerMockRecorder struct {
	mock *MockLimitRangeNamespaceLister
}

// NewMockLimitRangeNamespaceLister creates a new mock instance.
func NewMockLimitRangeNamespaceLister(ctrl *gomock.Controller) *MockLimitRangeNamespaceLister {
	mock := &MockLimitRangeNamespaceLister{ctrl: ctrl}
	mock.recorder = &MockLimitRangeNamespaceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLimitRangeNamespaceLister) EXPECT() *MockLimitRangeNamespaceListerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockLimitRangeNamespaceLister) Get(arg0 string) (*v1.LimitRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v1.LimitRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockLimitRangeNamespaceListerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLimitRangeNamespaceLister)(nil).Get), arg0)
}

// List mocks base method.
func (m *MockLimitRangeNamespaceLister) List(arg0 labels.Selector) ([]*v1.LimitRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.LimitRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockLimitRangeNamespaceListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLimitRangeNamespaceLister)(nil).List), arg0)
}

// MockNamespaceLister is a mock of NamespaceLister interface.
type MockNamespaceLister struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceListerMockRecorder
}

// MockNamespaceListerMockRecorder is the mock recorder for MockNamespaceLister.
type MockNamespaceListerMockRecorder struct {
	mock *MockNamespaceLister
}

// NewMockNamespaceLister creates a new mock instance.
func NewMockNamespaceLister(ctrl *gomock.Controller) *MockNamespaceLister {
	mock := &MockNamespaceLister{ctrl: ctrl}
	mock.recorder = &MockNamespaceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamespaceLister) EXPECT() *MockNamespaceListerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockNamespaceLister) Get(arg0 string) (*v1.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v1.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNamespaceListerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNamespaceLister)(nil).Get), arg0)
}

// List mocks base method.
func (m *MockNamespaceLister) List(arg0 labels.Selector) ([]*v1.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockNamespaceListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNamespaceLister)(nil).List), arg0)
}

// MockNodeLister is a mock of NodeLister interface.
type MockNodeLister struct {
	ctrl     *gomock.Controller
	recorder *MockNodeListerMockRecorder
}

// MockNodeListerMockRecorder is the mock recorder for MockNodeLister.
type MockNodeListerMockRecorder struct {
	mock *MockNodeLister
}

// NewMockNodeLister creates a new mock instance.
func NewMockNodeLister(ctrl *gomock.Controller) *MockNodeLister {
	mock := &MockNodeLister{ctrl: ctrl}
	mock.recorder = &MockNodeListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeLister) EXPECT() *MockNodeListerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockNodeLister) Get(arg0 string) (*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNodeListerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNodeLister)(nil).Get), arg0)
}

// List mocks base method.
func (m *MockNodeLister) List(arg0 labels.Selector) ([]*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockNodeListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNodeLister)(nil).List), arg0)
}

// MockPersistentVolumeLister is a mock of PersistentVolumeLister interface.
type MockPersistentVolumeLister struct {
	ctrl     *gomock.Controller
	recorder *MockPersistentVolumeListerMockRecorder
}

// MockPersistentVolumeListerMockRecorder is the mock recorder for MockPersistentVolumeLister.
type MockPersistentVolumeListerMockRecorder struct {
	mock *MockPersistentVolumeLister
}

// NewMockPersistentVolumeLister creates a new mock instance.
func NewMockPersistentVolumeLister(ctrl *gomock.Controller) *MockPersistentVolumeLister {
	mock := &MockPersistentVolumeLister{ctrl: ctrl}
	mock.recorder = &MockPersistentVolumeListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersistentVolumeLister) EXPECT() *MockPersistentVolumeListerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockPersistentVolumeLister) Get(arg0 string) (*v1.PersistentVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v1.PersistentVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPersistentVolumeListerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPersistentVolumeLister)(nil).Get), arg0)
}

// List mocks base method.
func (m *MockPersistentVolumeLister) List(arg0 labels.Selector) ([]*v1.PersistentVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.PersistentVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPersistentVolumeListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPersistentVolumeLister)(nil).List), arg0)
}

// MockPersistentVolumeClaimLister is a mock of PersistentVolumeClaimLister interface.
type MockPersistentVolumeClaimLister struct {
	ctrl     *gomock.Controller
	recorder *MockPersistentVolumeClaimListerMockRecorder
}

// MockPersistentVolumeClaimListerMockRecorder is the mock recorder for MockPersistentVolumeClaimLister.
type MockPersistentVolumeClaimListerMockRecorder struct {
	mock *MockPersistentVolumeClaimLister
}

// NewMockPersistentVolumeClaimLister creates a new mock instance.
func NewMockPersistentVolumeClaimLister(ctrl *gomock.Controller) *MockPersistentVolumeClaimLister {
	mock := &MockPersistentVolumeClaimLister{ctrl: ctrl}
	mock.recorder = &MockPersistentVolumeClaimListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersistentVolumeClaimLister) EXPECT() *MockPersistentVolumeClaimListerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockPersistentVolumeClaimLister) List(arg0 labels.Selector) ([]*v1.PersistentVolumeClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.PersistentVolumeClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPersistentVolumeClaimListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPersistentVolumeClaimLister)(nil).List), arg0)
}

// PersistentVolumeClaims mocks base method.
func (m *MockPersistentVolumeClaimLister) PersistentVolumeClaims(arg0 string) v10.PersistentVolumeClaimNamespaceLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistentVolumeClaims", arg0)
	ret0, _ := ret[0].(v10.PersistentVolumeClaimNamespaceLister)
	return ret0
}

// PersistentVolumeClaims indicates an expected call of PersistentVolumeClaims.
func (mr *MockPersistentVolumeClaimListerMockRecorder) PersistentVolumeClaims(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistentVolumeClaims", reflect.TypeOf((*MockPersistentVolumeClaimLister)(nil).PersistentVolumeClaims), arg0)
}

// MockPersistentVolumeClaimNamespaceLister is a mock of PersistentVolumeClaimNamespaceLister interface.
type MockPersistentVolumeClaimNamespaceLister struct {
	ctrl     *gomock.Controller
	recorder *MockPersistentVolumeClaimNamespaceListerMockRecorder
}

// MockPersistentVolumeClaimNamespaceListerMockRecorder is the mock recorder for MockPersistentVolumeClaimNamespaceLister.
type MockPersistentVolumeClaimNamespaceListerMockRecorder struct {
	mock *MockPersistentVolumeClaimNamespaceLister
}

// NewMockPersistentVolumeClaimNamespaceLister creates a new mock instance.
func NewMockPersistentVolumeClaimNamespaceLister(ctrl *gomock.Controller) *MockPersistentVolumeClaimNamespaceLister {
	mock := &MockPersistentVolumeClaimNamespaceLister{ctrl: ctrl}
	mock.recorder = &MockPersistentVolumeClaimNamespaceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersistentVolumeClaimNamespaceLister) EXPECT() *MockPersistentVolumeClaimNamespaceListerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockPersistentVolumeClaimNamespaceLister) Get(arg0 string) (*v1.PersistentVolumeClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v1.PersistentVolumeClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPersistentVolumeClaimNamespaceListerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPersistentVolumeClaimNamespaceLister)(nil).Get), arg0)
}

// List mocks base method.
func (m *MockPersistentVolumeClaimNamespaceLister) List(arg0 labels.Selector) ([]*v1.PersistentVolumeClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.PersistentVolumeClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPersistentVolumeClaimNamespaceListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPersistentVolumeClaimNamespaceLister)(nil).List), arg0)
}

// MockPodLister is a mock of PodLister interface.
type MockPodLister struct {
	ctrl     *gomock.Controller
	recorder *MockPodListerMockRecorder
}

// MockPodListerMockRecorder is the mock recorder for MockPodLister.
type MockPodListerMockRecorder struct {
	mock *MockPodLister
}

// NewMockPodLister creates a new mock instance.
func NewMockPodLister(ctrl *gomock.Controller) *MockPodLister {
	mock := &MockPodLister{ctrl: ctrl}
	mock.recorder = &MockPodListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodLister) EXPECT() *MockPodListerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockPodLister) List(arg0 labels.Selector) ([]*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPodListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPodLister)(nil).List), arg0)
}

// Pods mocks base method.
func (m *MockPodLister) Pods(arg0 string) v10.PodNamespaceLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pods", arg0)
	ret0, _ := ret[0].(v10.PodNamespaceLister)
	return ret0
}

// Pods indicates an expected call of Pods.
func (mr *MockPodListerMockRecorder) Pods(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pods", reflect.TypeOf((*MockPodLister)(nil).Pods), arg0)
}

// MockPodNamespaceLister is a mock of PodNamespaceLister interface.
type MockPodNamespaceLister struct {
	ctrl     *gomock.Controller
	recorder *MockPodNamespaceListerMockRecorder
}

// MockPodNamespaceListerMockRecorder is the mock recorder for MockPodNamespaceLister.
type MockPodNamespaceListerMockRecorder struct {
	mock *MockPodNamespaceLister
}

// NewMockPodNamespaceLister creates a new mock instance.
func NewMockPodNamespaceLister(ctrl *gomock.Controller) *MockPodNamespaceLister {
	mock := &MockPodNamespaceLister{ctrl: ctrl}
	mock.recorder = &MockPodNamespaceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodNamespaceLister) EXPECT() *MockPodNamespaceListerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockPodNamespaceLister) Get(arg0 string) (*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPodNamespaceListerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPodNamespaceLister)(nil).Get), arg0)
}

// List mocks base method.
func (m *MockPodNamespaceLister) List(arg0 labels.Selector) ([]*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPodNamespaceListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPodNamespaceLister)(nil).List), arg0)
}

// MockPodTemplateLister is a mock of PodTemplateLister interface.
type MockPodTemplateLister struct {
	ctrl     *gomock.Controller
	recorder *MockPodTemplateListerMockRecorder
}

// MockPodTemplateListerMockRecorder is the mock recorder for MockPodTemplateLister.
type MockPodTemplateListerMockRecorder struct {
	mock *MockPodTemplateLister
}

// NewMockPodTemplateLister creates a new mock instance.
func NewMockPodTemplateLister(ctrl *gomock.Controller) *MockPodTemplateLister {
	mock := &MockPodTemplateLister{ctrl: ctrl}
	mock.recorder = &MockPodTemplateListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodTemplateLister) EXPECT() *MockPodTemplateListerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockPodTemplateLister) List(arg0 labels.Selector) ([]*v1.PodTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.PodTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPodTemplateListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPodTemplateLister)(nil).List), arg0)
}

// PodTemplates mocks base method.
func (m *MockPodTemplateLister) PodTemplates(arg0 string) v10.PodTemplateNamespaceLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodTemplates", arg0)
	ret0, _ := ret[0].(v10.PodTemplateNamespaceLister)
	return ret0
}

// PodTemplates indicates an expected call of PodTemplates.
func (mr *MockPodTemplateListerMockRecorder) PodTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodTemplates", reflect.TypeOf((*MockPodTemplateLister)(nil).PodTemplates), arg0)
}

// MockPodTemplateNamespaceLister is a mock of PodTemplateNamespaceLister interface.
type MockPodTemplateNamespaceLister struct {
	ctrl     *gomock.Controller
	recorder *MockPodTemplateNamespaceListerMockRecorder
}

// MockPodTemplateNamespaceListerMockRecorder is the mock recorder for MockPodTemplateNamespaceLister.
type MockPodTemplateNamespaceListerMockRecorder struct {
	mock *MockPodTemplateNamespaceLister
}

// NewMockPodTemplateNamespaceLister creates a new mock instance.
func NewMockPodTemplateNamespaceLister(ctrl *gomock.Controller) *MockPodTemplateNamespaceLister {
	mock := &MockPodTemplateNamespaceLister{ctrl: ctrl}
	mock.recorder = &MockPodTemplateNamespaceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodTemplateNamespaceLister) EXPECT() *MockPodTemplateNamespaceListerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockPodTemplateNamespaceLister) Get(arg0 string) (*v1.PodTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v1.PodTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPodTemplateNamespaceListerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPodTemplateNamespaceLister)(nil).Get), arg0)
}

// List mocks base method.
func (m *MockPodTemplateNamespaceLister) List(arg0 labels.Selector) ([]*v1.PodTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.PodTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPodTemplateNamespaceListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPodTemplateNamespaceLister)(nil).List), arg0)
}

// MockReplicationControllerLister is a mock of ReplicationControllerLister interface.
type MockReplicationControllerLister struct {
	ctrl     *gomock.Controller
	recorder *MockReplicationControllerListerMockRecorder
}

// MockReplicationControllerListerMockRecorder is the mock recorder for MockReplicationControllerLister.
type MockReplicationControllerListerMockRecorder struct {
	mock *MockReplicationControllerLister
}

// NewMockReplicationControllerLister creates a new mock instance.
func NewMockReplicationControllerLister(ctrl *gomock.Controller) *MockReplicationControllerLister {
	mock := &MockReplicationControllerLister{ctrl: ctrl}
	mock.recorder = &MockReplicationControllerListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReplicationControllerLister) EXPECT() *MockReplicationControllerListerMockRecorder {
	return m.recorder
}

// GetPodControllers mocks base method.
func (m *MockReplicationControllerLister) GetPodControllers(arg0 *v1.Pod) ([]*v1.ReplicationController, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodControllers", arg0)
	ret0, _ := ret[0].([]*v1.ReplicationController)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodControllers indicates an expected call of GetPodControllers.
func (mr *MockReplicationControllerListerMockRecorder) GetPodControllers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodControllers", reflect.TypeOf((*MockReplicationControllerLister)(nil).GetPodControllers), arg0)
}

// List mocks base method.
func (m *MockReplicationControllerLister) List(arg0 labels.Selector) ([]*v1.ReplicationController, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.ReplicationController)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockReplicationControllerListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockReplicationControllerLister)(nil).List), arg0)
}

// ReplicationControllers mocks base method.
func (m *MockReplicationControllerLister) ReplicationControllers(arg0 string) v10.ReplicationControllerNamespaceLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicationControllers", arg0)
	ret0, _ := ret[0].(v10.ReplicationControllerNamespaceLister)
	return ret0
}

// ReplicationControllers indicates an expected call of ReplicationControllers.
func (mr *MockReplicationControllerListerMockRecorder) ReplicationControllers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicationControllers", reflect.TypeOf((*MockReplicationControllerLister)(nil).ReplicationControllers), arg0)
}

// MockReplicationControllerNamespaceLister is a mock of ReplicationControllerNamespaceLister interface.
type MockReplicationControllerNamespaceLister struct {
	ctrl     *gomock.Controller
	recorder *MockReplicationControllerNamespaceListerMockRecorder
}

// MockReplicationControllerNamespaceListerMockRecorder is the mock recorder for MockReplicationControllerNamespaceLister.
type MockReplicationControllerNamespaceListerMockRecorder struct {
	mock *MockReplicationControllerNamespaceLister
}

// NewMockReplicationControllerNamespaceLister creates a new mock instance.
func NewMockReplicationControllerNamespaceLister(ctrl *gomock.Controller) *MockReplicationControllerNamespaceLister {
	mock := &MockReplicationControllerNamespaceLister{ctrl: ctrl}
	mock.recorder = &MockReplicationControllerNamespaceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReplicationControllerNamespaceLister) EXPECT() *MockReplicationControllerNamespaceListerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockReplicationControllerNamespaceLister) Get(arg0 string) (*v1.ReplicationController, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v1.ReplicationController)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockReplicationControllerNamespaceListerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReplicationControllerNamespaceLister)(nil).Get), arg0)
}

// List mocks base method.
func (m *MockReplicationControllerNamespaceLister) List(arg0 labels.Selector) ([]*v1.ReplicationController, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.ReplicationController)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockReplicationControllerNamespaceListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockReplicationControllerNamespaceLister)(nil).List), arg0)
}

// MockResourceQuotaLister is a mock of ResourceQuotaLister interface.
type MockResourceQuotaLister struct {
	ctrl     *gomock.Controller
	recorder *MockResourceQuotaListerMockRecorder
}

// MockResourceQuotaListerMockRecorder is the mock recorder for MockResourceQuotaLister.
type MockResourceQuotaListerMockRecorder struct {
	mock *MockResourceQuotaLister
}

// NewMockResourceQuotaLister creates a new mock instance.
func NewMockResourceQuotaLister(ctrl *gomock.Controller) *MockResourceQuotaLister {
	mock := &MockResourceQuotaLister{ctrl: ctrl}
	mock.recorder = &MockResourceQuotaListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceQuotaLister) EXPECT() *MockResourceQuotaListerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockResourceQuotaLister) List(arg0 labels.Selector) ([]*v1.ResourceQuota, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.ResourceQuota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockResourceQuotaListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockResourceQuotaLister)(nil).List), arg0)
}

// ResourceQuotas mocks base method.
func (m *MockResourceQuotaLister) ResourceQuotas(arg0 string) v10.ResourceQuotaNamespaceLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceQuotas", arg0)
	ret0, _ := ret[0].(v10.ResourceQuotaNamespaceLister)
	return ret0
}

// ResourceQuotas indicates an expected call of ResourceQuotas.
func (mr *MockResourceQuotaListerMockRecorder) ResourceQuotas(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceQuotas", reflect.TypeOf((*MockResourceQuotaLister)(nil).ResourceQuotas), arg0)
}

// MockResourceQuotaNamespaceLister is a mock of ResourceQuotaNamespaceLister interface.
type MockResourceQuotaNamespaceLister struct {
	ctrl     *gomock.Controller
	recorder *MockResourceQuotaNamespaceListerMockRecorder
}

// MockResourceQuotaNamespaceListerMockRecorder is the mock recorder for MockResourceQuotaNamespaceLister.
type MockResourceQuotaNamespaceListerMockRecorder struct {
	mock *MockResourceQuotaNamespaceLister
}

// NewMockResourceQuotaNamespaceLister creates a new mock instance.
func NewMockResourceQuotaNamespaceLister(ctrl *gomock.Controller) *MockResourceQuotaNamespaceLister {
	mock := &MockResourceQuotaNamespaceLister{ctrl: ctrl}
	mock.recorder = &MockResourceQuotaNamespaceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceQuotaNamespaceLister) EXPECT() *MockResourceQuotaNamespaceListerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockResourceQuotaNamespaceLister) Get(arg0 string) (*v1.ResourceQuota, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v1.ResourceQuota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockResourceQuotaNamespaceListerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockResourceQuotaNamespaceLister)(nil).Get), arg0)
}

// List mocks base method.
func (m *MockResourceQuotaNamespaceLister) List(arg0 labels.Selector) ([]*v1.ResourceQuota, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.ResourceQuota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockResourceQuotaNamespaceListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockResourceQuotaNamespaceLister)(nil).List), arg0)
}

// MockSecretLister is a mock of SecretLister interface.
type MockSecretLister struct {
	ctrl     *gomock.Controller
	recorder *MockSecretListerMockRecorder
}

// MockSecretListerMockRecorder is the mock recorder for MockSecretLister.
type MockSecretListerMockRecorder struct {
	mock *MockSecretLister
}

// NewMockSecretLister creates a new mock instance.
func NewMockSecretLister(ctrl *gomock.Controller) *MockSecretLister {
	mock := &MockSecretLister{ctrl: ctrl}
	mock.recorder = &MockSecretListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretLister) EXPECT() *MockSecretListerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockSecretLister) List(arg0 labels.Selector) ([]*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSecretListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSecretLister)(nil).List), arg0)
}

// Secrets mocks base method.
func (m *MockSecretLister) Secrets(arg0 string) v10.SecretNamespaceLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Secrets", arg0)
	ret0, _ := ret[0].(v10.SecretNamespaceLister)
	return ret0
}

// Secrets indicates an expected call of Secrets.
func (mr *MockSecretListerMockRecorder) Secrets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secrets", reflect.TypeOf((*MockSecretLister)(nil).Secrets), arg0)
}

// MockSecretNamespaceLister is a mock of SecretNamespaceLister interface.
type MockSecretNamespaceLister struct {
	ctrl     *gomock.Controller
	recorder *MockSecretNamespaceListerMockRecorder
}

// MockSecretNamespaceListerMockRecorder is the mock recorder for MockSecretNamespaceLister.
type MockSecretNamespaceListerMockRecorder struct {
	mock *MockSecretNamespaceLister
}

// NewMockSecretNamespaceLister creates a new mock instance.
func NewMockSecretNamespaceLister(ctrl *gomock.Controller) *MockSecretNamespaceLister {
	mock := &MockSecretNamespaceLister{ctrl: ctrl}
	mock.recorder = &MockSecretNamespaceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretNamespaceLister) EXPECT() *MockSecretNamespaceListerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSecretNamespaceLister) Get(arg0 string) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSecretNamespaceListerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSecretNamespaceLister)(nil).Get), arg0)
}

// List mocks base method.
func (m *MockSecretNamespaceLister) List(arg0 labels.Selector) ([]*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSecretNamespaceListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSecretNamespaceLister)(nil).List), arg0)
}

// MockServiceLister is a mock of ServiceLister interface.
type MockServiceLister struct {
	ctrl     *gomock.Controller
	recorder *MockServiceListerMockRecorder
}

// MockServiceListerMockRecorder is the mock recorder for MockServiceLister.
type MockServiceListerMockRecorder struct {
	mock *MockServiceLister
}

// NewMockServiceLister creates a new mock instance.
func NewMockServiceLister(ctrl *gomock.Controller) *MockServiceLister {
	mock := &MockServiceLister{ctrl: ctrl}
	mock.recorder = &MockServiceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceLister) EXPECT() *MockServiceListerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockServiceLister) List(arg0 labels.Selector) ([]*v1.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockServiceListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServiceLister)(nil).List), arg0)
}

// Services mocks base method.
func (m *MockServiceLister) Services(arg0 string) v10.ServiceNamespaceLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Services", arg0)
	ret0, _ := ret[0].(v10.ServiceNamespaceLister)
	return ret0
}

// Services indicates an expected call of Services.
func (mr *MockServiceListerMockRecorder) Services(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Services", reflect.TypeOf((*MockServiceLister)(nil).Services), arg0)
}

// MockServiceNamespaceLister is a mock of ServiceNamespaceLister interface.
type MockServiceNamespaceLister struct {
	ctrl     *gomock.Controller
	recorder *MockServiceNamespaceListerMockRecorder
}

// MockServiceNamespaceListerMockRecorder is the mock recorder for MockServiceNamespaceLister.
type MockServiceNamespaceListerMockRecorder struct {
	mock *MockServiceNamespaceLister
}

// NewMockServiceNamespaceLister creates a new mock instance.
func NewMockServiceNamespaceLister(ctrl *gomock.Controller) *MockServiceNamespaceLister {
	mock := &MockServiceNamespaceLister{ctrl: ctrl}
	mock.recorder = &MockServiceNamespaceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceNamespaceLister) EXPECT() *MockServiceNamespaceListerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockServiceNamespaceLister) Get(arg0 string) (*v1.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServiceNamespaceListerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServiceNamespaceLister)(nil).Get), arg0)
}

// List mocks base method.
func (m *MockServiceNamespaceLister) List(arg0 labels.Selector) ([]*v1.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockServiceNamespaceListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServiceNamespaceLister)(nil).List), arg0)
}

// MockServiceAccountLister is a mock of ServiceAccountLister interface.
type MockServiceAccountLister struct {
	ctrl     *gomock.Controller
	recorder *MockServiceAccountListerMockRecorder
}

// MockServiceAccountListerMockRecorder is the mock recorder for MockServiceAccountLister.
type MockServiceAccountListerMockRecorder struct {
	mock *MockServiceAccountLister
}

// NewMockServiceAccountLister creates a new mock instance.
func NewMockServiceAccountLister(ctrl *gomock.Controller) *MockServiceAccountLister {
	mock := &MockServiceAccountLister{ctrl: ctrl}
	mock.recorder = &MockServiceAccountListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceAccountLister) EXPECT() *MockServiceAccountListerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockServiceAccountLister) List(arg0 labels.Selector) ([]*v1.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockServiceAccountListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServiceAccountLister)(nil).List), arg0)
}

// ServiceAccounts mocks base method.
func (m *MockServiceAccountLister) ServiceAccounts(arg0 string) v10.ServiceAccountNamespaceLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceAccounts", arg0)
	ret0, _ := ret[0].(v10.ServiceAccountNamespaceLister)
	return ret0
}

// ServiceAccounts indicates an expected call of ServiceAccounts.
func (mr *MockServiceAccountListerMockRecorder) ServiceAccounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceAccounts", reflect.TypeOf((*MockServiceAccountLister)(nil).ServiceAccounts), arg0)
}

// MockServiceAccountNamespaceLister is a mock of ServiceAccountNamespaceLister interface.
type MockServiceAccountNamespaceLister struct {
	ctrl     *gomock.Controller
	recorder *MockServiceAccountNamespaceListerMockRecorder
}

// MockServiceAccountNamespaceListerMockRecorder is the mock recorder for MockServiceAccountNamespaceLister.
type MockServiceAccountNamespaceListerMockRecorder struct {
	mock *MockServiceAccountNamespaceLister
}

// NewMockServiceAccountNamespaceLister creates a new mock instance.
func NewMockServiceAccountNamespaceLister(ctrl *gomock.Controller) *MockServiceAccountNamespaceLister {
	mock := &MockServiceAccountNamespaceLister{ctrl: ctrl}
	mock.recorder = &MockServiceAccountNamespaceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceAccountNamespaceLister) EXPECT() *MockServiceAccountNamespaceListerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockServiceAccountNamespaceLister) Get(arg0 string) (*v1.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v1.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServiceAccountNamespaceListerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServiceAccountNamespaceLister)(nil).Get), arg0)
}

// List mocks base method.
func (m *MockServiceAccountNamespaceLister) List(arg0 labels.Selector) ([]*v1.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockServiceAccountNamespaceListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServiceAccountNamespaceLister)(nil).List), arg0)
}
