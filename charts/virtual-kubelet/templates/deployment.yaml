apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace }}
  name: {{ template "vk.fullname" . }}
{{ include "vk.labels" . | indent 2 }}
    component: kubelet
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "vk.name" . }}
  template:
    metadata:
{{ include "vk.labels" . | indent 6 }}
        component: kubelet
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
    spec:
      initContainers:
        - name: init-validation
          image: "{{ .Values.initImage.repository }}/{{ .Values.initImage.name }}:{{ .Values.initImage.initTag }}"
          imagePullPolicy: {{ .Values.initImage.pullPolicy }}
          env:
          - name: KUBELET_PORT
            value: "10250"
          - name: APISERVER_CERT_LOCATION
            value: /etc/virtual-kubelet/cert.pem
          - name: APISERVER_KEY_LOCATION
            value: /etc/virtual-kubelet/key.pem
          - name: VKUBELET_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
{{- with .Values.providers.azure }}
{{- if .managedIdentityID }}
          - name: VIRTUALNODE_USER_IDENTITY_CLIENTID
            value: {{ .managedIdentityID }}
{{- end }}
{{- if .targetAKS }}
          - name: AKS_CREDENTIAL_LOCATION
            value: /etc/aks/azure.json
          - name: AZURE_TENANT_ID
            value: {{ .tenantId }}
          - name: AZURE_SUBSCRIPTION_ID
            value: {{ .subscriptionId }}
          - name: AZURE_CLIENT_ID
            value: {{ .clientId }}
          - name: AZURE_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: {{ template "vk.fullname" $ }}
                key: clientSecret
          - name: ACI_RESOURCE_GROUP
            value: {{ .aciResourceGroup }}
          - name: ACI_REGION
            value: {{ .aciRegion }}
          - name: ACI_EXTRA_USER_AGENT
            value: {{ printf "helm-chart/aks/%s/%s" $.Chart.Name $.Chart.Version }}
{{- else }}
          - name: AZURE_AUTH_LOCATION
            value: /etc/virtual-kubelet/credentials.json
          - name: ACI_RESOURCE_GROUP
            value: {{ required "aciResourceGroup is required" .aciResourceGroup }}
          - name: ACI_REGION
            value: {{ required "aciRegion is required" .aciRegion }}
          - name: ACI_EXTRA_USER_AGENT
            value: {{ printf "helm-chart/other/%s/%s" $.Chart.Name $.Chart.Version }}
{{- end }}
{{- if .vnet.enabled }}
          - name: ACI_VNET_SUBSCRIPTION_ID
            value: {{ .vnet.vnetSubscriptionID}}
          - name: ACI_VNET_RESOURCE_GROUP
            value: {{ .vnet.vnetResourceGroup}}
          - name: ACI_VNET_NAME
            value: {{ .vnet.vnetName}}
          - name: ACI_SUBNET_NAME
            value: {{ required "subnetName is required" .vnet.subnetName }}
          - name: ACI_SUBNET_CIDR
            value: {{ .vnet.subnetCidr }}
          - name: MASTER_URI
            value: {{ required "masterUri is required" .masterUri | quote }}
          - name: CLUSTER_CIDR
            value: {{ .vnet.clusterCidr }}
          - name: KUBE_DNS_IP
            value: {{ .vnet.kubeDnsIp }}
{{- else }}
          - name: MASTER_URI
            value: {{ .masterUri | quote }}
{{- end }}
{{- end }}
          volumeMounts:
          - name: credentials
            mountPath: "/etc/virtual-kubelet"
          - name: certificates
            mountPath: /etc/kubernetes/certs
            readOnly: true
            {{- if .Values.providers.azure.targetAKS }}
          - name: aks-credential
            mountPath: "/etc/aks/azure.json"
            {{- end }}
      containers:
      - name: {{ template "vk.fullname" . }}
        image: "{{ .Values.image.repository }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: KUBELET_PORT
          value: "10250"
        - name: APISERVER_CERT_LOCATION
          value: /etc/virtual-kubelet/cert.pem
        - name: APISERVER_KEY_LOCATION
          value: /etc/virtual-kubelet/key.pem
        - name: VKUBELET_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: VKUBELET_TAINT_KEY
          value: {{ .Values.taint.key }}
        - name: VKUBELET_TAINT_VALUE
          value: {{ tpl .Values.taint.value $ }}
        - name: VKUBELET_TAINT_EFFECT
          value: {{ .Values.taint.effect }}
{{- if eq (required "You must specify a Virtual Kubelet provider" .Values.provider) "azure" }}
{{- with .Values.providers.azure }}
{{- if .loganalytics.enabled }}
        - name: LOG_ANALYTICS_AUTH_LOCATION
          value: /etc/virtual-kubelet/loganalytics.json
        - name: CLUSTER_RESOURCE_ID
          value:  {{ .loganalytics.clusterResourceId }}
{{- end }}
{{- if .managedIdentityID }}
        - name: VIRTUALNODE_USER_IDENTITY_CLIENTID
          value: {{ .managedIdentityID }}
{{- end }}
{{- if .targetAKS }}
        - name: AKS_CREDENTIAL_LOCATION
          value: /etc/aks/azure.json
        - name: AZURE_TENANT_ID
          value: {{ .tenantId }}
        - name: AZURE_SUBSCRIPTION_ID
          value: {{ .subscriptionId }}
        - name: AZURE_CLIENT_ID
          value: {{ .clientId }}
        - name: AZURE_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ template "vk.fullname" $ }}
              key: clientSecret
        - name: ACI_RESOURCE_GROUP
          value: {{ .aciResourceGroup }}
        - name: ACI_REGION
          value: {{ .aciRegion }}
        - name: ACI_EXTRA_USER_AGENT
          value: {{ printf "helm-chart/aks/%s/%s" $.Chart.Name $.Chart.Version }}
{{- else }}
        - name: AZURE_AUTH_LOCATION
          value: /etc/virtual-kubelet/credentials.json
        - name: ACI_RESOURCE_GROUP
          value: {{ required "aciResourceGroup is required" .aciResourceGroup }}
        - name: ACI_REGION
          value: {{ required "aciRegion is required" .aciRegion }}
        - name: ACI_EXTRA_USER_AGENT
          value: {{ printf "helm-chart/other/%s/%s" $.Chart.Name $.Chart.Version }}
{{- end }}
{{- if .vnet.enabled }}
        - name: ACI_VNET_SUBSCRIPTION_ID
          value: {{ .vnet.vnetSubscriptionID}}
        - name: ACI_VNET_RESOURCE_GROUP
          value: {{ .vnet.vnetResourceGroup}}
        - name: ACI_VNET_NAME
          value: {{ .vnet.vnetName}}
        - name: ACI_SUBNET_NAME
          value: {{ required "subnetName is required" .vnet.subnetName }}
        - name: ACI_SUBNET_CIDR
          value: {{ .vnet.subnetCidr }}
        - name: MASTER_URI
          value: {{ required "masterUri is required" .masterUri | quote }}
        - name: CLUSTER_CIDR
          value: {{ .vnet.clusterCidr }}
        - name: KUBE_DNS_IP
          value: {{ .vnet.kubeDnsIp }}
{{- else }}
        - name: MASTER_URI
          value: {{ .masterUri | quote }}
{{- end }}
{{- if .enableRealTimeMetrics }}
        - name: ENABLE_REAL_TIME_METRICS
          value: "true"
{{- end }}
{{- end }}
{{- end }}
        volumeMounts:
        - name: credentials
          mountPath: "/etc/virtual-kubelet"
        - name: certificates
          mountPath: /etc/kubernetes/certs
          readOnly: true
{{- if eq (required "You must specify a Virtual Kubelet provider" .Values.provider) "azure" }}
{{- if .Values.providers.azure.targetAKS }}
        - name: aks-credential
          mountPath: "/etc/aks/azure.json"
{{- end }}
{{- end }}
        command: ["virtual-kubelet"]
        args: [
{{- if not .Values.taint.enabled }}
          "--disable-taint", "true",
{{- end }}
          "--provider", "{{ required "You must specify a Virtual Kubelet provider" .Values.provider }}",
          "--namespace", "{{ .Values.monitoredNamespace }}",
          "--nodename", "{{ required "nodeName is required" .Values.nodeName }}",
{{- if .Values.logLevel }}
          "--log-level", "{{.Values.logLevel}}",
{{- end }}
{{- if ne .Values.trace.exporter "" }}
          "--trace-exporter", "{{ .Values.trace.exporter }}",
{{- if gt .Values.trace.sampleRate 0.0 }}
          "--trace-sample-rate", "{{ .Values.trace.sampleRate }}",
{{- end }}
{{- $serviceName := tpl .Values.trace.serviceName $ }}
{{- if ne $serviceName "" }}
          "--trace-service-name", "{{ $serviceName }}",
{{- end}}
{{- end}}
{{- if  .Values.enableAuthenticationTokenWebhook }}
          "--authentication-token-webhook=true",
          "--client-verify-ca", "/etc/kubernetes/certs/ca.crt",
{{- end }}
          "--no-verify-clients={{ .Values.disableVerifyClients }}",
          "--os", "{{ .Values.nodeOsType }}"
        ]
      volumes:
      - name: credentials
        secret:
          secretName: {{ template "vk.fullname" . }}
      - name: certificates
        hostPath:
          path: /etc/kubernetes/certs
{{- if eq (required "You must specify a Virtual Kubelet provider" .Values.provider) "azure" }}
{{- if .Values.providers.azure.targetAKS }}
      - name: aks-credential
        hostPath:
          path: /etc/kubernetes/azure.json
          type: File
{{- end }}
{{- end }}
      serviceAccountName: {{ if .Values.rbac.install }} "{{ template "vk.fullname" . }}-{{ .Values.rbac.serviceAccountName }}" {{ end }}
      nodeSelector:
        beta.kubernetes.io/os: linux
